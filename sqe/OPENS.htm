<!DOCTYPE html>
<html>
<head>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
            font-family: Arial, sans-serif;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .health-good { background-color: #90EE90; }
        .health-ok { background-color: #FFD700; }
        .health-reconsider { background-color: #FFB6C1; }
        .total-row {
            font-weight: bold;
            background-color: #f8f8f8;
            position: sticky;
            bottom: 0;
        }
        .health-meter {
            width: 100%;
            height: 30px;
            background-color: #f0f0f0;
            margin-top: 20px;
            position: relative;
            border: 1px solid #ddd;
        }
        .health-bar {
            height: 100%;
            transition: width 0.5s ease-in-out;
        }
        .health-text {
            position: absolute;
            width: 100%;
            text-align: center;
            line-height: 30px;
            color: black;
            font-weight: bold;
        }
        select {
            padding: 4px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        .status-O { background-color: #98FB98; }
        .status-P { background-color: #FFB6C1; }
        .status-E { background-color: #FFD700; }
        .status-N { background-color: #FF6B6B; }
        .description {
            font-size: 0.9em;
            color: #666;
        }
        .container {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        .legend {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .legend-item {
            display: inline-block;
            margin-right: 20px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="legend">
        <h3>Status Legend:</h3>
        <div class="legend-item status-O">O = Outstanding (100%)</div>
        <div class="legend-item status-E">E = Excellent (80%)</div>
        <div class="legend-item status-P">P = Poor (40%)</div>
        <div class="legend-item status-N">N = No Evidence (0%)</div>
    </div>
    
    <table id="healthTable">
        <thead>
            <tr>
                <th>Document Category</th>
                <th>Description</th>
                <th>Weight</th>
                <th>Status</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody id="tableBody"></tbody>
    </table>
    
    <div class="health-meter">
        <div id="healthBar" class="health-bar"></div>
        <div id="healthText" class="health-text"></div>
    </div>
</div>

<script>
    function getScoreFromStatus(status, weight) {
        const scoreMap = {
            'O': 1,
            'E': 0.8,
            'P': 0.4,
            'N': 0
        };
        return weight * scoreMap[status];
    }

    function createStatusDropdown(defaultValue, weight, updateCallback) {
        const select = document.createElement('select');
        ['O', 'E', 'P', 'N'].forEach(status => {
            const option = document.createElement('option');
            option.value = status;
            option.text = status;
            if (status === defaultValue) option.selected = true;
            select.appendChild(option);
        });
        select.className = `status-${defaultValue}`;
        select.addEventListener('change', (e) => {
            select.className = `status-${e.target.value}`;
            updateCallback();
        });
        return select;
    }

const documentData = [
    {
        name: "SW SOW Compliance Matrix",
        description: "Is the complete SW SOW Compliance Matrix filled out by supplier?",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW SOW Compliance Matrix",
        description: "Wherever there are deviations or not accepted, how are the alternatives defined?",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW SOW Compliance Matrix",
        description: "Are there any uncertainties?",
        weight: 1,
        status: 'O'
    },
    {
        name: "Document Traceability Matrix",
        description: "Is the matrix filled out with mapping to the supplier's corresponding documentation structure?",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "project scope, and work products to be developed",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "life cycle model and methodology to be used",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "VCG specific requirements and procedures related to project management",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "tasks to be accomplished, task ownership",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "project personnel, named and availability, necessary training",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "project resources, equipment, tools, etc., named and availability",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "project roles, their responsibilities and needed skills, mapped to project personnel",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "schedules (by reference), milestones and target dates",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "communication interfaces",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "risk planning",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "maintenance planning",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "progress reporting",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Plan (SWDP)",
        description: "estimates",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Risk Management List",
        description: "unique risk IDs and dates when identified",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Risk Management List",
        description: "risk descriptions and analysis to assess the likelihood of the risk occurring and the consequences and impacts of the risks",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Risk Management List",
        description: "actions to be taken to mitigate risks according to their prioritization",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Risk Management List",
        description: "history mitigating actions, their due date(s), status, and responsible person(s)",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Schedule (SWDS)",
        description: "activity name",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Schedule (SWDS)",
        description: "estimated duration",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Schedule (SWDS)",
        description: "planned and actual start date",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Schedule (SWDS)",
        description: "planned and actual completion date",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Development Schedule (SWDS)",
        description: "activity progress [% performed]",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "a summary of project activities and accomplishments",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "progress in accordance with planned tasks in SWDS and SW implementation plans",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "issues and suggested solutions",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "planned activities for the next reporting period",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "risks and suggested mitigation actions",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "summary of quality assurance (QA) activities and accomplishments",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "software module development status",
        weight: 0,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "other findings and recommendations for the reported period",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "software design description status and review status",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "software implementation status (source code/models) and review status",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "software unit test description status and review status",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Progress Report",
        description: "software integration test description status and review status",
        weight: 0.5,
        status: 'O'
    },

    // SW Configuration Management Plan
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "define the procedures to control changes to configuration items",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "define measurements used to determine the status of the configuration management activities",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "define configuration management audit criteria",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "VCC specific requirements and procedures related to configuration management",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "identify configuration library tools or mechanism",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "include records and status reports that show the status and history of controlled items",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "specify the location and access mechanisms for the configuration management library",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Configuration Management Plan (SWCP)",
        description: "storage, handling and delivery (including archival and retrieval) mechanisms specified",
        weight: 1,
        status: 'O'
    },

    // SW Design Description
    {
        name: "SW Design Description (SWDD)",
        description: "describe the overall software structure (block diagram)",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Design Description (SWDD)",
        description: "describe the operative system including task structure",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Design Description (SWDD)",
        description: "identify inter-task/inter-process communication",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Design Description (SWDD)",
        description: "identify the required software elements",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Design Description (SWDD)",
        description: "identify own developed and supplied code",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Design Description (SWDD)",
        description: "identify the relationship and dependency between software elements",
        weight: 1,
        status: 'O'
    },

    // SWDD detailed design
    {
        name: "SWDD Detailed Design",
        description: "provide detailed design (could be represented as a prototype, flow chart, entity relationship diagram, pseudo code, etc.)",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "provide format of input/output data",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "provide specification of CPU, ROM, RAM, EEPROM and Flash needs",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "describe the interrupts with their priorities",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "describe the tasks with cycle time and priority",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "establish required data naming conventions",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "define the format of required data structures",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "define the data fields and purpose of each required data element",
        weight: 1,
        status: 'O'
    },
    {
        name: "SWDD Detailed Design",
        description: "provide the specifications of the program structure",
        weight: 1,
        status: 'O'
    },

    // Hardware/Software Interface Specification
    {
        name: "Hardware/Software Interface Specification",
        description: "reset and watchdog timing",
        weight: 1,
        status: 'O'
    },
    {
        name: "Hardware/Software Interface Specification",
        description: "interrupts mechanism",
        weight: 1,
        status: 'O'
    },
    {
        name: "Hardware/Software Interface Specification",
        description: "memory maps",
        weight: 1,
        status: 'O'
    },
    {
        name: "Hardware/Software Interface Specification",
        description: "digital, analogue input/output",
        weight: 1,
        status: 'O'
    },
    {
        name: "Hardware/Software Interface Specification",
        description: "communication interfaces",
        weight: 1,
        status: 'O'
    },
    {
        name: "Hardware/Software Interface Specification",
        description: "display interfaces",
        weight: 1,
        status: 'O'
    }
    // Software Product Specification
    {
        name: "Software Product Specification (SWPS)",
        description: "Check that used SWPS describes how to build, generate and maintain executable software",
        weight: 1,
        status: 'O'
    },

    // Software Version Description
    {
        name: "Software Version Description (SWVD)",
        description: "build label id",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "SW/HW part number/version",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "ref. to SWRT (implementation and test status per requirement)",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "issue status (both contractor internal issues and VCC SW issues)",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "SW metrics",
        weight: 0,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "Cyclomatic Complexity Metric",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "Static Path Count",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "Code Test Coverage",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "MISRA Compliance",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "Current and projected Microprocessor load",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "Current and projected Flash/RAM/EEPROM Memory Size (used and free)",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "HW/SW dependencies",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Version Description (SWVD)",
        description: "customer impact",
        weight: 1,
        status: 'O'
    },

    // SW Test Description
    {
        name: "SW Test Description (SWTD)",
        description: "purpose of the tests",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Description (SWTD)",
        description: "preconditions for each test",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Description (SWTD)",
        description: "detailed software test cases and procedures necessary to execute the SWTP",
        weight: 1,
        status: 'O'
    },

    // SW Test Report
    {
        name: "SW Test Report (SWTR)",
        description: "test log (project, SW/HW version used, test execution date, responsible test engineer(s))",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Report (SWTR)",
        description: "test metrics (no of test cases performed/not performed/failed)",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Report (SWTR)",
        description: "references to detailed test results/verdicts (SWTV(s))",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Report (SWTR)",
        description: "recommendation of actions",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Report (SWTR)",
        description: "conclusions of testing",
        weight: 1,
        status: 'O'
    },

    // SW Test Verdicts
    {
        name: "SW Test Verdicts (SWTV)",
        description: "Does the chain work? VCC to send sandbox.xml for supplier to populate with test verdicts",
        weight: 1,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "objectives/goals for quality",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "defined activities/tasks required to ensure quality",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "references to related work products",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "method of assessment/assuring quality",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "references to any regulatory requirements, standards, customer requirements",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "expected quality criteria",
        weight: 0.5,
        status: 'O'
    },
    {
        name: "SW Test Verdicts (SWTV)",
        description: "VCG specific requirements and procedures related to quality management",
        weight: 0.5,
        status: 'O'
    },

    // Software Requirements Traceability Matrix
    {
        name: "Software Requirements Traceability Matrix (SWRT)",
        description: "Are requirements SWRS-Application, SWRS-Base Tech agreed? Documented in SWRT.",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Requirements Traceability Matrix (SWRT)",
        description: "Are requirements planned to be implemented/tested in SW implementation plan? Documented in SWRT.",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Requirements Traceability Matrix (SWRT)",
        description: "Are test cases inspected to verify a specific requirement?",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Requirements Traceability Matrix (SWRT)",
        description: "Does the SWEJ reflect the current project status? Are activities at the gates in the pass carried out/planned?",
        weight: 1,
        status: 'O'
    },

    // Software Worst-Case Analysis Report
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "estimated Microprocessor load",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "estimated Flash Memory size",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "estimated RAM Memory size",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "estimated EEPROM Memory size",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "Interrupt latency",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "ISR timing",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "Percentage CPU load/bandwidth – including interrupts (nominal and worst-case)",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "Maximum/Nominal interrupt rate",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "Scheduler timing and Task timing",
        weight: 1,
        status: 'O'
    },
    {
        name: "Software Worst-Case Analysis Report (SWWCA)",
        description: "Sensitivity of timing due to degradation in hardware (time, temperature and voltage)",
        weight: 1,
        status: 'O'
    }
];

    function updateScores() {
        let totalWeight = 0;
        let totalScore = 0;
        
        const rows = document.querySelectorAll('#tableBody tr:not(.total-row)');
        rows.forEach(row => {
            const weight = parseFloat(row.cells[2].textContent);
            const status = row.cells[3].querySelector('select').value;
            const score = getScoreFromStatus(status, weight);
            
            row.cells[4].textContent = score.toFixed(1);
            totalWeight += weight;
            totalScore += score;
        });

        // Update totals
        const totalRow = document.querySelector('.total-row');
        if (totalRow) {
            totalRow.cells[4].textContent = totalScore.toFixed(1);
        }

        // Update health bar
        const healthPercentage = (totalScore / totalWeight) * 100;
        const healthBar = document.getElementById('healthBar');
        const healthText = document.getElementById('healthText');
        
        healthBar.style.width = `${healthPercentage}%`;
        healthText.textContent = `Health Check: ${healthPercentage.toFixed(1)}%`;

        if (healthPercentage >= 80) {
            healthBar.style.backgroundColor = '#90EE90';
            healthText.textContent += ' (GOOD)';
        } else if (healthPercentage >= 60) {
            healthBar.style.backgroundColor = '#FFD700';
            healthText.textContent += ' (OK)';
        } else {
            healthBar.style.backgroundColor = '#FFB6C1';
            healthText.textContent += ' (Reconsider recommended)';
        }
    }

    // Initialize table
    const tableBody = document.getElementById('tableBody');
    documentData.forEach(item => {
        const row = tableBody.insertRow();
        row.insertCell(0).textContent = item.name;
        row.insertCell(1).textContent = item.description;
        row.insertCell(2).textContent = item.weight;
        row.insertCell(3).appendChild(createStatusDropdown(item.status, item.weight, updateScores));
        row.insertCell(4).textContent = getScoreFromStatus(item.status, item.weight).toFixed(1);
    });

    // Add total row
    const totalRow = tableBody.insertRow();
    totalRow.className = 'total-row';
    totalRow.insertCell(0).textContent = 'TOTAL';
    totalRow.insertCell(1).textContent = '';
    totalRow.insertCell(2).textContent = documentData.reduce((sum, item) => sum + item.weight, 0).toFixed(1);
    totalRow.insertCell(3).textContent = '-';
    totalRow.insertCell(4).textContent = documentData.reduce((sum, item) => sum + getScoreFromStatus(item.status, item.weight), 0).toFixed(1);

    // Initial calculation
    updateScores();
</script>
</body>
</html>
