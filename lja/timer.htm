<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toastmasters Timer</title>
 <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }

        .container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .panel {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .current-item {
            font-size: 1.1em;
            line-height: 1.6;
        }

        .lights {
            display: flex;
            justify-content: space-around;
            padding: 20px;
        }

        .light {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 2px solid #333;
            background-color: #ddd;
            transition: background-color 0.3s ease;
        }

        .buttons {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        button {
            flex: 1;
            padding: 10px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            color: white;
            transition: opacity 0.2s ease;
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        #startBtn { background-color: #4CAF50; }
        #stopBtn { background-color: #f44336; }
        #nextBtn { background-color: #2196F3; }
        #resetBtn { background-color: #9e9e9e; }

        .time-display {
            font-size: 2em;
            font-family: monospace;
            text-align: center;
            margin: 20px 0;
        }

        .agenda-table {
            width: 100%;
            border-collapse: collapse;
        }

        .agenda-table th, .agenda-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .agenda-table tr.current {
            background-color: #e3f2fd;
        }

        .log-panel {
            height: 400px;
            overflow-y: auto;
            font-family: monospace;
            white-space: pre-wrap;
            background: #f8f9fa;
            padding: 10px;
        }

        .agenda-table td.editable {
            cursor: pointer;
            position: relative;
        }

        .agenda-table td.editable:hover {
            background-color: #f0f0f0;
        }

        .agenda-table td.editable:hover::after {
            content: '✎';
            position: absolute;
            right: 5px;
            color: #666;
        }

        .edit-input {
            width: 100%;
            padding: 5px;
            border: 2px solid #2196F3;
            border-radius: 4px;
            font-size: inherit;
            font-family: inherit;
        }

        /* Additional styles for better visuals */
        h2 {
            margin-top: 0;
            color: #333;
        }

        .panel h2 {
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .current-item div {
            margin-bottom: 8px;
        }

        /* Scrollbar styling */
        .log-panel::-webkit-scrollbar {
            width: 8px;
        }

        .log-panel::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .log-panel::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        .log-panel::-webkit-scrollbar-thumb:hover {
            background: #666;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="left-panel">
            <div class="panel current-item">
                <h2>Current Item</h2>
                <div id="roleDisplay">Role: </div>
                <div id="presenterDisplay">Presenter: </div>
                <div id="eventDisplay">Event: </div>
                <div class="time-display" id="timeDisplay">0:00</div>
            </div>

            <div class="panel">
                <h2>Signals</h2>
                <div class="lights">
                    <div id="greenLight" class="light"></div>
                    <div id="amberLight" class="light"></div>
                    <div id="redLight" class="light"></div>
                </div>
            </div>

            <div class="buttons">
                <button id="startBtn">Start</button>
                <button id="stopBtn" disabled>Stop</button>
                <button id="nextBtn">Next</button>
                <button id="resetBtn">Reset</button>
            </div>

            <div class="panel">
                <h2>Agenda</h2>
                <table class="agenda-table" id="agendaTable">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Role</th>
                            <th>Presenter</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>

        <div class="right-panel">
            <div class="panel">
                <h2>Timing Log</h2>
                <div class="log-panel" id="logPanel"></div>
            </div>
        </div>
    </div>

    <script>
        // Define agenda data structure (this would normally come from a TOML file)
const agenda = [
    {
        time: "09:30",
        role: "Breakfast",
        presenter: "",
        event: "",
        green: 1,
        amber: 2,
        red: 3
    },
    {
        time: "10:00",
        role: "President",
        presenter: "Mariya Bokova",
        event: "Welcomes members and guests",
        green: 0,
        amber: 0,
        red: 300
    },
    {
        time: "10:05",
        role: "Toastmaster",
        presenter: "Karin Strand Björk",
        event: "Introduces the program and roles",
        green: 0,
        amber: 0,
        red: 300
    },
    {
        time: "10:10",
        role: "1st Speaker",
        presenter: "Britta Berg",
        event: "Educational session on Pathway and tools provided by TMI",
        green: 1200,
        amber: 1440,
        red: 1500
    },
    {
        time: "10:35",
        role: "1st Write eval notes",
        presenter: "",
        event: "1 minute",
        green: 0,
        amber: 0,
        red: 60
    },
    {
        time: "10:36",
        role: "1st Evaluator",
        presenter: "Sofia Haarderup",
        event: "Evaluate speech 1",
        green: 480,
        amber: 540,
        red: 600
    },
    {
        time: "10:46",
        role: "2nd Speaker",
        presenter: "Gianluca Tognon",
        event: "TBD. Please note, the project is a mismatch in Easy Speak",
        green: 300,
        amber: 360,
        red: 420
    },
    {
        time: "10:53",
        role: "2nd Write eval notes",
        presenter: "",
        event: "1 minute",
        green: 0,
        amber: 0,
        red: 60
    },
    {
        time: "10:54",
        role: "2nd Evaluator",
        presenter: "Carolina Ahlstedt",
        event: "Evaluate speech 2",
        green: 480,
        amber: 540,
        red: 600
    },
    {
        time: "11:04",
        role: "3rd Speaker",
        presenter: "Zain Zubair",
        event: "TBA",
        green: 300,
        amber: 360,
        red: 420
    },
    {
        time: "11:11",
        role: "3rd Write eval notes",
        presenter: "",
        event: "1 minute",
        green: 0,
        amber: 0,
        red: 60
    },
    {
        time: "11:12",
        role: "Short break",
        presenter: "",
        event: "Break",
        green: 270,
        amber: 285,
        red: 300
    },
    {
        time: "11:17",
        role: "3rd Evaluator",
        presenter: "Mariya Bokova",
        event: "Evaluate speech 3",
        green: 480,
        amber: 540,
        red: 600
    },
    {
        time: "11:27",
        role: "Table Topics",
        presenter: "Michael Ruutu",
        event: "Table Topics",
        green: 60,
        amber: 90,
        red: 120
    },
    {
        time: "11:37",
        role: "1st Timekeeper",
        presenter: "",
        event: "Timers report",
        green: 60,
        amber: 90,
        red: 120
    },
    {
        time: "11:39",
        role: "Grammarian & Ah Counter",
        presenter: "Kerstin Löfstedt",
        event: "Grammarian & Ah counter Report",
        green: 120,
        amber: 150,
        red: 180
    },
    {
        time: "11:42",
        role: "Discussion",
        presenter: "",
        event: "Roles and theme for next meeting",
        green: 300,
        amber: 360,
        red: 420
    },
    {
        time: "11:49",
        role: "Club Business & Awards",
        presenter: "Mariya Bokova",
        event: "Announcements",
        green: 0,
        amber: 0,
        red: 300
    },
    {
        time: "11:54",
        role: "End of Meeting",
        presenter: "",
        event: "",
        green: 0,
        amber: 0,
        red: 0
    }
];

        let currentItemIndex = 0;
        let elapsed = 0;
        let timerInterval = null;
        let isRunning = false;

        // DOM elements
        const timeDisplay = document.getElementById('timeDisplay');
        const roleDisplay = document.getElementById('roleDisplay');
        const presenterDisplay = document.getElementById('presenterDisplay');
        const eventDisplay = document.getElementById('eventDisplay');
        const greenLight = document.getElementById('greenLight');
        const amberLight = document.getElementById('amberLight');
        const redLight = document.getElementById('redLight');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const nextBtn = document.getElementById('nextBtn');
        const resetBtn = document.getElementById('resetBtn');
        const logPanel = document.getElementById('logPanel');
        const agendaTable = document.getElementById('agendaTable').getElementsByTagName('tbody')[0];

        function updateDisplay() {
            const currentItem = agenda[currentItemIndex];
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
        
            timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            roleDisplay.textContent = `Role: ${currentItem.role}`;
            presenterDisplay.textContent = `Presenter: ${currentItem.presenter}`;
            eventDisplay.textContent = `Event: ${currentItem.event}`;
        
            // Update lights
            if (currentItem.red > 0) {
                greenLight.style.backgroundColor = elapsed >= currentItem.green ? 'green' : '#ddd';
                amberLight.style.backgroundColor = elapsed >= currentItem.amber ? 'yellow' : '#ddd';
                redLight.style.backgroundColor = elapsed >= currentItem.red ? 'red' : '#ddd';
            } else {
                greenLight.style.backgroundColor = '#ddd';
                amberLight.style.backgroundColor = '#ddd';
                redLight.style.backgroundColor = '#ddd';
            }
        
            // Update agenda table with editable presenters
            updateAgendaTable();
        }


        function updateAgendaTable() {
            agendaTable.innerHTML = '';
            agenda.forEach((item, index) => {
                const row = agendaTable.insertRow();
                if (index === currentItemIndex) {
                    row.classList.add('current');
                }
                row.insertCell(0).textContent = item.time;
                row.insertCell(1).textContent = item.role;
                
                // Make presenter cell editable
                const presenterCell = row.insertCell(2);
                presenterCell.textContent = item.presenter;
                presenterCell.className = 'editable';
                presenterCell.setAttribute('data-index', index);
                presenterCell.addEventListener('click', function() {
                    startEditing(this);
                });
            });
        }

        function addLogEntry() {
            const currentItem = agenda[currentItemIndex];
            if (currentItem.red > 0 && elapsed > 0) {
                let status;
                if (elapsed < currentItem.green) {
                    status = "Under minimum time";
                } else if (elapsed < currentItem.amber) {
                    status = "Green";
                } else if (elapsed < currentItem.red) {
                    status = "Amber";
                } else {
                    const overTime = elapsed - currentItem.red;
                    status = `Red (${overTime} seconds over)`;
                }
        
                const timestamp = new Date().toLocaleTimeString();
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                
                const logEntry = `[${timestamp}] ${currentItem.role}
        Presenter: ${currentItem.presenter}
        Time: ${minutes}:${seconds.toString().padStart(2, '0')}
        Status: ${status}
        ───────────────────\n`;
        
                logPanel.innerText = logEntry + logPanel.innerText;
            }
        }

        startBtn.addEventListener('click', () => {
            if (!isRunning) {
                isRunning = true;
                startBtn.disabled = true;
                stopBtn.disabled = false;
                timerInterval = setInterval(() => {
                    elapsed++;
                    updateDisplay();
                }, 1000);
            }
        });


        stopBtn.addEventListener('click', () => {
            if (isRunning) {
                isRunning = false;
                startBtn.disabled = false;
                stopBtn.disabled = true;
                clearInterval(timerInterval);
            }
        });
        
        nextBtn.addEventListener('click', () => {
            if (elapsed > 0) {
                addLogEntry();
            }
            if (currentItemIndex < agenda.length - 1) {
                currentItemIndex++;
                elapsed = 0;
                isRunning = false;
                startBtn.disabled = false;
                stopBtn.disabled = true;
                clearInterval(timerInterval);
                updateDisplay();
            }
        });

        resetBtn.addEventListener('click', () => {
            elapsed = 0;
            updateDisplay();
        });

        function updateAgendaTable() {
            agendaTable.innerHTML = '';
            agenda.forEach((item, index) => {
                const row = agendaTable.insertRow();
                if (index === currentItemIndex) {
                    row.classList.add('current');
                }
                row.insertCell(0).textContent = item.time;
                row.insertCell(1).textContent = item.role;
                
                // Make presenter cell editable
                const presenterCell = row.insertCell(2);
                presenterCell.textContent = item.presenter;
                presenterCell.className = 'editable';
                presenterCell.setAttribute('data-index', index);
                presenterCell.addEventListener('click', function() {
                    startEditing(this);
                });
            });
        }

        function startEditing(cell) {
            // Don't start editing if already editing
            if (cell.querySelector('input')) return;
        
            const currentValue = cell.textContent;
            const index = cell.getAttribute('data-index');
            
            // Create input element
            const input = document.createElement('input');
            input.type = 'text';
            input.value = currentValue;
            input.className = 'edit-input';
            
            // Clear cell and add input
            cell.textContent = '';
            cell.appendChild(input);
            input.focus();
        
            // Handle input events
            input.addEventListener('blur', function() {
                finishEditing(cell, input, index);
            });
            
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    finishEditing(cell, input, index);
                }
                if (e.key === 'Escape') {
                    cell.textContent = currentValue;
                }
            });
        }
        
        function finishEditing(cell, input, index) {
            const newValue = input.value.trim();
            agenda[index].presenter = newValue;
            cell.textContent = newValue;
            
            // Update current item display if editing current item
            if (index == currentItemIndex) {
                presenterDisplay.textContent = `Presenter: ${newValue}`;
            }
        }

        // Initialize display
        updateDisplay();
    </script>
</body>
</html>
