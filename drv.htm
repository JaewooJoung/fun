<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complete Question Loader</title>
    <!-- Dependencies -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.3.4/vue.global.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Mulish:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #007bff;
            --success: #28a745;
            --dark: #1a202c;
            --background: #f7fafc;
            --error: #dc2626;
            --border: #e2e8f0;
            --hover: #f8fafc;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Mulish', sans-serif;
            background-color: var(--background);
            min-height: 100vh;
            padding: 20px;
            color: var(--dark);
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        .card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .header {
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 24px;
            font-weight: 700;
            color: var(--dark);
        }

        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        input {
            padding: 8px 16px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 14px;
            flex: 1;
            font-family: 'Mulish', sans-serif;
        }

        input:focus {
            outline: none;
            border-color: var(--primary);
        }

        button {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 8px 24px;
            border-radius: 9999px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            font-family: 'Mulish', sans-serif;
            min-width: 100px;
        }

        button:hover {
            opacity: 0.9;
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .error {
            background-color: #fee2e2;
            color: var(--error);
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .success {
            background-color: #dcfce7;
            color: var(--success);
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .question-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border);
        }

        .question-number {
            font-weight: bold;
            color: var(--primary);
        }

        .question-type {
            font-size: 14px;
            color: #666;
        }

        .question-content {
            margin-bottom: 20px;
        }

        .question-text {
            font-size: 16px;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        .options-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .option {
            padding: 12px;
            border: 1px solid var(--border);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .option:hover {
            background-color: var(--hover);
        }

        .option.selected {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .radio-circle {
            width: 20px;
            height: 20px;
            border: 2px solid currentColor;
            border-radius: 50%;
            display: inline-block;
            position: relative;
        }

        .option.selected .radio-circle::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 10px;
            background: white;
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-item {
            flex: 1;
            padding: 15px;
            background: white;
            border-radius: 8px;
            text-align: center;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary);
        }

        .stat-label {
            font-size: 14px;
            color: #666;
        }

        @media (max-width: 640px) {
            .input-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div id="app" class="container">
        <!-- Header Card -->
        <div class="card header">
            <h1>Question Loader</h1>
        </div>

        <!-- Controls Card -->
        <div class="card">
            <!-- Auth Section -->
            <div v-if="!isLoggedIn" class="input-group">
                <input 
                    type="email" 
                    v-model="credentials.email" 
                    placeholder="Email"
                    @keyup.enter="login"
                >
                <input 
                    type="password" 
                    v-model="credentials.password" 
                    placeholder="Password"
                    @keyup.enter="login"
                >
                <button @click="login" :disabled="loading">
                    {{ loading ? 'Logging in...' : 'Login' }}
                </button>
            </div>

            <!-- Question Loading Section -->
            <div v-else>
                <div class="input-group">
                    <input 
                        type="number" 
                        v-model="chapterId" 
                        placeholder="Enter chapter ID (e.g. 247)"
                        @keyup.enter="loadQuestions"
                    >
                    <button @click="loadQuestions" :disabled="loading || !chapterId">
                        {{ loading ? 'Loading...' : 'Load Questions' }}
                    </button>
                </div>
            </div>
        </div>

        <!-- Messages -->
        <div v-if="error" class="error">
            {{ error }}
        </div>
        <div v-if="success" class="success">
            {{ success }}
        </div>

        <!-- Stats -->
        <div v-if="questions.length" class="stats">
            <div class="stat-item">
                <div class="stat-value">{{ questions.length }}</div>
                <div class="stat-label">Total Questions</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{{ answeredCount }}</div>
                <div class="stat-label">Answered</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{{ scorePercentage }}%</div>
                <div class="stat-label">Score</div>
            </div>
        </div>

        <!-- Questions -->
        <div v-if="loading" class="loading">
            {{ loadingMessage }}
        </div>

        <div v-for="(question, index) in questions" :key="index" class="question-card">
            <div class="question-header">
                <span class="question-number">Question {{ index + 1 }}</span>
                <span class="question-type">Practice Question</span>
            </div>
            <div class="question-content">
                <p class="question-text">{{ question.text }}</p>
                <div class="options-list">
                    <div 
                        v-for="(option, optIndex) in question.options" 
                        :key="optIndex"
                        class="option"
                        :class="{ selected: answers[index] === optIndex }"
                        @click="selectAnswer(index, optIndex)"
                    >
                        <span class="radio-circle"></span>
                        <span>{{ option }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
    const { createApp } = Vue

    createApp({
        data() {
            // Previous data remains the same
        },

        methods: {
            async loadQuestions() {
                if (!this.chapterId) {
                    this.showMessage('Please enter a chapter ID');
                    return;
                }

                this.loading = true;
                this.loadingMessage = 'Loading questions...';
                this.questions = [];
                this.answers = [];

                try {
                    // Try to load from Teoricentralen API
                    const response = await axios.get(`https://elev.majvallenstrafikskola.se/read/book/trafikregler/new-trafikens-grundregel-221/questions`, {
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'referer': 'https://elev.majvallenstrafikskola.se/',
                            'origin': 'https://elev.majvallenstrafikskola.se'
                        },
                        withCredentials: true // Include cookies
                    });

                    if (response.data && Array.isArray(response.data)) {
                        this.questions = response.data;
                    } else {
                        // Fallback to direct API endpoint
                        const altResponse = await axios.get(`https://elev.majvallenstrafikskola.se/api/questions/${this.chapterId}`, {
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        this.questions = altResponse.data;
                    }

                    this.answers = new Array(this.questions.length).fill(null);
                    this.showMessage(`Successfully loaded ${this.questions.length} questions`, 'success');
                } catch (error) {
                    console.error('API Error:', error);
                    this.showMessage('Failed to load questions: ' + error.message);
                    
                    // For development - log the error details
                    if (error.response) {
                        console.log('Error Response:', error.response.data);
                        console.log('Error Status:', error.response.status);
                        console.log('Error Headers:', error.response.headers);
                    }
                } finally {
                    this.loading = false;
                    this.loadingMessage = '';
                }
            },
            // Other methods remain the same
        }
    }).mount('#app')
</script>

</html>
