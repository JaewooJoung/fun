<!DOCTYPE html>
<html>
<head>
  <title>일정체크용 calendar (WebAssembly)</title>
  <style>
    h1 {text-align: left;}
    h2 {text-align: left;}
    div {text-align: center;}
    table {
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid black;
      padding: 5px;
      text-align: center;
      position: relative;
    }
    .week-number {
      font-weight: bold;
      color: blue;
    }
    .today {
      font-weight: bold;
      color: red;
      border-radius: 50%;
      display: inline-block;
      width: 25px;
      height: 25px;
      line-height: 25px;
      text-align: center;
    }
    .weekend {
      background-color: #f0f0f0;
    }
    td.holiday {
      background-color: #ffcccc !important;
      font-weight: bold;
      cursor: pointer;
    }
    .vacation-week {
      background-color: #e6f7ff;
    }
    .calendar-table {
      display: inline-block;
      margin-right: 20px;
      margin-bottom: 20px;
    }
    #weatherContainer {
      margin: 10px 0;
      font-weight: bold;
    }
    .tooltip {
      position: absolute;
      background-color: #333;
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      z-index: 1000;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-bottom: 5px;
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
    }
    .tooltip::after {
      content: "";
      position: absolute;
      top: 100%;
      left: 50%;
      margin-left: -5px;
      border-width: 5px;
      border-style: solid;
      border-color: #333 transparent transparent transparent;
    }
    td.holiday:hover .tooltip {
      opacity: 1;
    }
    .wasm-status {
      background-color: #e8f5e8;
      border: 1px solid #4caf50;
      padding: 10px;
      margin: 10px 0;
      border-radius: 4px;
    }
    .wasm-error {
      background-color: #ffebee;
      border: 1px solid #f44336;
      padding: 10px;
      margin: 10px 0;
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <div id="wasmStatus" class="wasm-status">🔄 Loading WebAssembly module...</div>
  <span id="pageTitle">일정체크용 calendar (WebAssembly) / </span>
  <span id="currentDate"></span>
  <span id="currentTime"></span>
  <div id="weatherContainer">Loading Göteborg weather...</div>
  <center>
    <label for="year">Select Year:</label>
    <input type="number" id="year" onchange="generateCalendar()">
    <button onclick="generateCalendar()">Go</button>
  </center>
  <div id="calendarContainer"></div>

  <script>
    // WebAssembly module and functions
    let wasmModule = null;
    let wasmExports = null;
    let holidays = [];
    let holidayMap = {};

    // WebAssembly binary (compiled from C++)
    const wasmBinary = new Uint8Array([
      0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x04, 0x60, 0x02, 0x7f, 0x7f, 0x01,
      0x7f, 0x60, 0x03, 0x7f, 0x7f, 0x7f, 0x01, 0x7f, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x60, 0x00, 0x00,
      0x03, 0x05, 0x04, 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x70, 0x00, 0x00, 0x05, 0x03, 0x01,
      0x00, 0x02, 0x06, 0x08, 0x01, 0x7f, 0x01, 0x41, 0x80, 0x88, 0x04, 0x0b, 0x07, 0x2e, 0x04, 0x06,
      0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0b, 0x67, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b,
      0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x00, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x61, 0x79, 0x73,
      0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x00, 0x01, 0x0c, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x70,
      0x59, 0x65, 0x61, 0x72, 0x00, 0x02, 0x0a, 0x7f, 0x04, 0x3c, 0x01, 0x01, 0x7f, 0x02, 0x40, 0x20,
      0x00, 0x41, 0x01, 0x6b, 0x21, 0x02, 0x20, 0x00, 0x41, 0x01, 0x46, 0x0d, 0x00, 0x20, 0x02, 0x41,
      0x0c, 0x6a, 0x20, 0x00, 0x20, 0x00, 0x41, 0x02, 0x4e, 0x1b, 0x21, 0x00, 0x20, 0x01, 0x41, 0x01,
      0x6b, 0x21, 0x01, 0x0b, 0x20, 0x01, 0x41, 0x16, 0x6c, 0x20, 0x00, 0x41, 0x0d, 0x6c, 0x6a, 0x41,
      0x05, 0x6a, 0x41, 0x19, 0x6e, 0x0b, 0x2a, 0x00, 0x20, 0x01, 0x41, 0x02, 0x46, 0x04, 0x40, 0x20,
      0x00, 0x10, 0x02, 0x04, 0x40, 0x41, 0x1d, 0x0f, 0x0b, 0x41, 0x1c, 0x0f, 0x0b, 0x41, 0x80, 0x88,
      0x04, 0x20, 0x01, 0x41, 0x01, 0x6b, 0x41, 0x02, 0x74, 0x6a, 0x28, 0x02, 0x00, 0x0b, 0x1a, 0x00,
      0x20, 0x00, 0x41, 0x04, 0x70, 0x45, 0x20, 0x00, 0x41, 0x64, 0x70, 0x45, 0x71, 0x20, 0x00, 0x41,
      0x90, 0x03, 0x70, 0x45, 0x72, 0x0b, 0x02, 0x00, 0x0b, 0x0b, 0x2c, 0x01, 0x00, 0x41, 0x80, 0x88,
      0x04, 0x0b, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1e,
      0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1f,
      0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f,
      0x00, 0x00, 0x00
    ]);

    // Initialize WebAssembly
    async function initWasm() {
      try {
        wasmModule = await WebAssembly.instantiate(wasmBinary);
        wasmExports = wasmModule.instance.exports;
        document.getElementById('wasmStatus').innerHTML = '✅ WebAssembly module loaded successfully!';
        document.getElementById('wasmStatus').className = 'wasm-status';
        
        // Test the functions
        const testWeek = wasmExports.getWeekNumber(2025, 1);
        const testDays = wasmExports.getDaysInMonth(2025, 2);
        const testLeap = wasmExports.isLeapYear(2024);
        
        console.log('WASM Tests:', { week: testWeek, days: testDays, leap: testLeap });
        
        // Generate calendar after WASM is ready
        generateCalendar();
      } catch (error) {
        console.error('WebAssembly initialization failed:', error);
        document.getElementById('wasmStatus').innerHTML = '❌ WebAssembly failed to load. Using JavaScript fallback.';
        document.getElementById('wasmStatus').className = 'wasm-error';
      }
    }

    // JavaScript fallback functions
    function getWeekNumberJS(year, month) {
      const date = new Date(year, month - 1, 1);
      const januaryFirst = new Date(year, 0, 1);
      const daysSinceJanuaryFirst = Math.floor((date - januaryFirst) / 86400000);
      return Math.ceil((daysSinceJanuaryFirst + januaryFirst.getDay() + 1) / 7);
    }

    function getDaysInMonthJS(year, month) {
      return new Date(year, month, 0).getDate();
    }

    function isLeapYearJS(year) {
      return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
    }

    // Wrapper functions that use WASM or fallback
    function getWeekNumber(year, month) {
      if (wasmExports) {
        return wasmExports.getWeekNumber(year, month);
      }
      return getWeekNumberJS(year, month);
    }

    function getDaysInMonth(year, month) {
      if (wasmExports) {
        return wasmExports.getDaysInMonth(year, month);
      }
      return getDaysInMonthJS(year, month);
    }

    function isLeapYear(year) {
      if (wasmExports) {
        return wasmExports.isLeapYear(year) === 1;
      }
      return isLeapYearJS(year);
    }

    // Fetch Swedish holidays
    async function fetchHolidays(year) {
      try {
        const response = await fetch(`https://api.dryg.net/dagar/v2.1/${year}`);
        const data = await response.json();
        holidays = data.dagar.filter(day => day.helgdag && day.helgdag !== "Annandag pingst");
        
        holidayMap = {};
        holidays.forEach(holiday => {
          if (holiday.helgdag !== "Annandag pingst") {
            holidayMap[holiday.datum] = holiday.helgdag;
          }
        });
      } catch (error) {
        console.error("Error fetching holidays:", error);
      }
    }

    function getHolidayName(year, month, day) {
      const dateStr = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      return holidayMap[dateStr] || null;
    }

    function getWeather() {
      const url = 'https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/11.97/lat/57.71/data.json';
      
      fetch(url)
        .then(response => response.json())
        .then(data => {
          const now = new Date();
          const currentTime = now.toISOString().slice(0, 13) + ':00:00Z';
          
          const currentData = data.timeSeries.find(entry => 
            entry.validTime === currentTime
          );
          
          if (currentData) {
            const temp = currentData.parameters.find(p => p.name === 't').values[0];
            const weatherSymbol = currentData.parameters.find(p => p.name === 'Wsymb2').values[0];
            
            const weatherDescriptions = {
              1: '☀️ Clear sky', 2: '🌤️ Nearly clear sky', 3: '⛅ Variable cloudiness',
              4: '☁️ Halfcloudy', 5: '☁️ Cloudy', 6: '🌥️ High cloudiness',
              7: '🌫️ Fog', 8: '🌦️ Light rain showers', 9: '🌧️ Moderate rain showers',
              10: '🌧️ Heavy rain showers', 15: '❄️ Light snow showers',
              16: '❄️ Moderate snow showers', 17: '❄️ Heavy snow showers',
              18: '⛈️ Thunder', 19: '🌨️ Sleet showers', 20: '🌨️ Heavy sleet showers',
              21: '⚡ Lightning', 22: '🌧️ Rain', 23: '❄️ Snowfall',
              24: '🌨️ Sleet', 25: '⛈️ Thunderstorm', 26: '🧊 Freezing rain'
            };
            
            const weatherText = weatherDescriptions[weatherSymbol] || '🌤️ Fair weather';
            document.getElementById("weatherContainer").innerHTML = 
              `Göteborg: ${temp.toFixed(1)}°C, ${weatherText} <br>(from Swedish Meteorological and Hydrological Institute)`;
          } else {
            document.getElementById("weatherContainer").textContent = 
              "Göteborg: Weather data not available";
          }
        })
        .catch(error => {
          console.error("Error fetching SMHI weather:", error);
          document.getElementById("weatherContainer").textContent = 
            "Göteborg: Weather service unavailable";
        });
    }

    function getCurrentDateTime() {
      const now = new Date();
      document.getElementById("currentDate").textContent = now.toDateString();
      document.getElementById("currentTime").textContent = now.toLocaleTimeString();
    }

    function updateTitle(year) {
      document.title = `일정체크용 calendar (WebAssembly) - ${year}`;
      document.getElementById('pageTitle').textContent = `일정체크용 calendar (WebAssembly) - ${year}`;
    }

    async function generateCalendar() {
      const yearInput = document.getElementById("year");
      const year = parseInt(yearInput.value);
      
      const startTime = performance.now();
      
      await fetchHolidays(year);
      updateTitle(year);
      const calendarContainer = document.getElementById("calendarContainer");
      calendarContainer.innerHTML = "";

      for (let month = 1; month <= 12; month++) {
        const date = new Date(year, month - 1, 1);
        const monthName = date.toLocaleString('default', { month: 'long' });
        const daysInMonth = getDaysInMonth(year, month);

        const calendarTable = document.createElement("table");
        calendarTable.classList.add("calendar-table");

        const thead = document.createElement("thead");
        const monthTitleRow = document.createElement("tr");
        const monthTitleCell = document.createElement("th");
        monthTitleCell.textContent = monthName;
        monthTitleCell.colSpan = 8;
        monthTitleRow.appendChild(monthTitleCell);
        thead.appendChild(monthTitleRow);

        const headerRow = document.createElement("tr");
        ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "WN"].forEach(weekday => {
          const th = document.createElement("th");
          th.textContent = weekday;
          headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        calendarTable.appendChild(thead);

        const tbody = document.createElement("tbody");
        let firstDayOfMonth = new Date(year, month - 1, 1);
        let dayOfWeek = firstDayOfMonth.getDay();
        if (dayOfWeek === 0) dayOfWeek = 7;

        let week = getWeekNumber(year, month);
        let day = 1;

        while (day <= daysInMonth) {
          const weekRow = document.createElement("tr");

          if (week >= 29 && week <= 32) {
            weekRow.classList.add("vacation-week");
          }

          for (let weekday = 1; weekday <= 7; weekday++) {
            const td = document.createElement("td");

            if (weekday === 6 || weekday === 7) {
              td.classList.add("weekend");
            }

            if (weekday < dayOfWeek || day > daysInMonth) {
              td.textContent = "";
            } else {
              td.textContent = day;
              
              const today = new Date();
              if (year === today.getFullYear() && month === today.getMonth() + 1 && day === today.getDate()) {
                td.classList.add("today");
                td.style.backgroundColor = "#ffebee";
              }

              const holidayName = getHolidayName(year, month, day);
              if (holidayName) {
                td.classList.add("holiday");
                
                const tooltip = document.createElement("div");
                tooltip.classList.add("tooltip");
                tooltip.textContent = holidayName;
                td.appendChild(tooltip);
              }

              day++;
            }
            weekRow.appendChild(td);
          }

          const weekTd = document.createElement("td");
          weekTd.classList.add("week-number");
          weekTd.textContent = week;
          weekRow.appendChild(weekTd);

          tbody.appendChild(weekRow);

          if (day <= daysInMonth) {
            const nextWeekDate = new Date(year, month - 1, day);
            week = getWeekNumber(year, Math.min(month + 1, 12));
            dayOfWeek = nextWeekDate.getDay();
            if (dayOfWeek === 0) dayOfWeek = 7;
          }
        }

        calendarTable.appendChild(tbody);
        calendarContainer.appendChild(calendarTable);
      }
      
      const endTime = performance.now();
      const renderTime = (endTime - startTime).toFixed(2);
      
      // Update status to show performance
      const statusDiv = document.getElementById('wasmStatus');
      if (wasmExports) {
        statusDiv.innerHTML = `✅ WebAssembly active - Calendar rendered in ${renderTime}ms`;
      } else {
        statusDiv.innerHTML = `⚠️ JavaScript fallback - Calendar rendered in ${renderTime}ms`;
      }
    }

    // Initialize everything
    document.getElementById('year').value = new Date().getFullYear();
    getCurrentDateTime();
    getWeather();
    
    // Initialize WASM and then generate calendar
    initWasm();

    // Update time every second
    setInterval(getCurrentDateTime, 1000);
  </script>
</body>
</html>
